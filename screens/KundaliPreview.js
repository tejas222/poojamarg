import {
  KeyboardAvoidingView,
  SafeAreaView,
  ScrollView,
  StyleSheet,
  Text,
  View,
} from 'react-native';
import React, { useLayoutEffect, useState } from 'react';
import { background, primary } from '../utils/constants';
import CardItem from '../components/CardItem';
import CheckoutButton from '../components/CheckoutButton';
import { useUser } from '../context/UserContext';
import firestore from '@react-native-firebase/firestore';
import { useNavigation } from '@react-navigation/native';
import auth from '@react-native-firebase/auth';

const KundaliPreview = ({ route }) => {
  const navigation = useNavigation();
  const { name, birthDate, birthTime, birthPlace, question, isCustomized } =
    route.params;
  const { user, poojaPrice } = useUser();
  const { kundali, customKundali } = poojaPrice;
  const updatedDetails = {
    user,
    price: isCustomized ? customKundali : kundali,
  };
  const [paymentSuccess, setPaymentSuccess] = useState(false);

  useLayoutEffect(() => {
    navigation.setOptions({
      title: 'Confirm Details',
    });
  }, [navigation]);

  const handlePaymentSuccess = async () => {
    console.log(
      'ЁЯФе Muhurt Request handlePaymentSuccess CALLED! ЁЯФе',
      'price' + kundali,
    ); // Add this
    setPaymentSuccess(true);

    try {
      const requestId = `KUNDALI_${Date.now()}`;
      const bookingData = {
        requestId: requestId,
        name: name,
        birthDate: birthDate,
        birthTime: birthTime,
        birthPlace: birthPlace,
        question,
        customerPhone: user.phoneNumber,
        userId: auth().currentUser?.uid,
        paymentStatus: 'Paid',
        type: isCustomized ? 'Custom Kundali' : 'Simple Kundali',
        price: isCustomized ? customKundali : kundali,
        createdAt: firestore.FieldValue.serverTimestamp(),
      };

      await firestore().collection('kundali').add(bookingData);
      navigation.navigate('MyBookings');
    } catch (error) {
      console.log('Error saving booking', error);
      Alert.alert('Error', 'Could not save booking. Please try again.');
    }
  };

  return (
    <KeyboardAvoidingView
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'} // or 'position'
      style={{ flex: 1 }}
      keyboardVerticalOffset={80} // Adjust if header/nav overlaps
    >
      <SafeAreaView style={{ flex: 1 }}>
        <ScrollView
          style={styles.container}
          contentContainerStyle={{ paddingBottom: 50, flexGrow: 1 }}
        >
          <CardItem />

          <Text style={styles.heading}>рдЬрдиреНрдо рддрдкрд╢реАрд▓ </Text>
          <View style={styles.card}>
            <View style={styles.section}>
              <Text style={styles.label}>
                рдирд╛рд╡: <Text style={styles.value}> {name}</Text>
              </Text>
            </View>

            <View style={styles.section}>
              <Text style={styles.label}>
                рдЬрдиреНрдо рддрд╛рд░реАрдЦ: <Text style={styles.value}> {birthDate}</Text>
              </Text>
            </View>

            <View style={styles.section}>
              <Text style={styles.label}>
                рдЬрдиреНрдо рд╡реЗрд│:<Text style={styles.value}> {birthTime}</Text>
              </Text>
            </View>

            <View style={styles.section}>
              <Text style={styles.label}>
                рдЬрдиреНрдорд╕реНрдерд╛рди:<Text style={styles.value}> {birthPlace}</Text>
              </Text>
            </View>
            {isCustomized && (
              <View style={styles.section}>
                <Text style={styles.label}>
                  рдкреНрд░рд╢реНрди:<Text style={styles.value}> {question}</Text>
                </Text>
              </View>
            )}
          </View>

          <View style={styles.card}>
            <Text style={styles.cardTitle}>
              ЁЯкФ рдХреБрдВрдбрд▓реАрдордзреНрдпреЗ рдХрд╛рдп рд╕рдорд╛рд╡рд┐рд╖реНрдЯ рдЖрд╣реЗ?
            </Text>
            <Text style={styles.cardText}>
              ЁЯФп рдЬрдиреНрдордХреБрдВрдбрд▓реА - рдЧреНрд░рд╣рд╛рдВрдЪреА рдЬрдиреНрдорд╡реЗрд│реЗрдЪреА рдорд╛рдВрдбрдгреА
            </Text>
            <Text style={styles.cardText}>
              ЁЯУН рд▓рдЧреНрди - рд╡реНрдпрдХреНрддрд┐рдорддреНрддреНрд╡ рдЖрдгрд┐ рдЬреАрд╡рдирд╢реИрд▓реА
            </Text>
            <Text style={styles.cardText}>
              ЁЯМХ рдЪрдВрджреНрд░ рд░рд╛рд╢реА - рднрд╛рд╡рдирд╛ рд╡ рдорд╛рдирд╕рд┐рдХ рд╕реНрдереИрд░реНрдп
            </Text>
            <Text style={styles.cardText}>
              тШАя╕П рд╕реВрд░реНрдп рд░рд╛рд╢реА - рдЖрддреНрдорд╡рд┐рд╢реНрд╡рд╛рд╕ рд╡ рдЙрджреНрджрд┐рд╖реНрдЯреЗ
            </Text>
            <Text style={styles.cardText}>
              ЁЯУЕ рджрд╢рд╛/рдЕрдВрддрд░реНрджрд╢рд╛ - рдЬреАрд╡рдирд╛рддреАрд▓ рдХрд╛рд▓рдЦрдВрдб
            </Text>
            <Text style={styles.cardText}>
              ЁЯУИ рднрд╛рд╡ рд╡рд┐рд╢реНрд▓реЗрд╖рдг - рд╡рд┐рд╡рд╛рд╣, рдХрд░рд┐рдЕрд░, рдЖрд░реЛрдЧреНрдп рдЗрддреНрдпрд╛рджреА
            </Text>
            <Text style={styles.cardText}>
              ЁЯкР рдЧреНрд░рд╣рдмрд▓ рд╡ рджреГрд╖реНрдЯрд┐ - рд╢реБрдн/рдЕрд╢реБрдн рдкреНрд░рднрд╛рд╡
            </Text>
            <Text style={styles.cardText}>
              ЁЯММ рдирдХреНрд╖рддреНрд░ рд╡ рдЪрд░рдг - рдЬрдиреНрдо рдирдХреНрд╖рддреНрд░ рдорд╛рд╣рд┐рддреА
            </Text>
            <Text style={styles.cardText}>
              ЁЯУК рд╡рд╛рд░реНрд╖рд┐рдХ рднрд╡рд┐рд╖реНрдп - рдпреЗрдгрд╛рд▒реНрдпрд╛ рд╡рд░реНрд╖рд╛рдЪреЗ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд╡рд┐рд╢реНрд▓реЗрд╖рдг
            </Text>
          </View>
          <View style={{ marginVertical: 15 }}>
            <CheckoutButton
              updatedDetails={updatedDetails}
              onPaymentSuccess={handlePaymentSuccess}
            />
          </View>
        </ScrollView>
      </SafeAreaView>
    </KeyboardAvoidingView>
  );
};

export default KundaliPreview;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: background,
    padding: 15,
  },
  heading: {
    fontSize: 22,
    fontWeight: 'bold',
    color: primary,
    textAlign: 'center',
    marginVertical: 10,
  },
  section: {
    marginBottom: 12,
  },
  label: {
    fontSize: 17,
    fontWeight: '600',
    color: '#555',
  },
  value: {
    fontSize: 17,
    color: '#222',
    marginTop: 2,
  },
  card: {
    backgroundColor: '#fff',
    padding: 15,
    borderRadius: 10,
    marginTop: 10,
    elevation: 2,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: primary,
    marginBottom: 10,
  },
  cardText: {
    fontSize: 17,
    marginVertical: 2,
    color: '#333',
  },
  note: {
    fontSize: 14,
    color: '#777',
    marginTop: 10,
    fontStyle: 'italic',
  },
});
